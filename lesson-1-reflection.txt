How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    I knew what to look for and where since I knew where there was a difference between the two files.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It makes faster finding what, during changes, could have gone wrong. So if a bug arise, comparing older versions can help pinpointing and isolate the source.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: you choose only when it's worth to be committed and avoid committing when you're still halfway through the work
    Cons: committing at the wrong time and place as well as without a proper commit message

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because systems like Git works on projects made of different files, interconnected and worked on "simultaneously". Other systems like Google Docs, only works on one file at a time.

How can you use the commands git log and git diff to view the history of files?

    git log to see the history of commits and what changes were made through time, git diff to see the changes between 2 commits.

How might using version control make you more confident to make changes that
could break something?

    I have a track of what I'm doing and I can go back inspecting the changes if bugs arise.

Now that you have your workspace set up, what do you want to try using Git for?

    Code-related stuff. University projects, maybe some personal projects.